<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Flo&#39;s notes</title>
    <link>https://sweb.github.io/posts/</link>
    <description>Recent content in Posts on Flo&#39;s notes</description>
    <generator>Hugo -- 0.147.9</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Jul 2025 19:41:09 +0200</lastBuildDate>
    <atom:link href="https://sweb.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Study on AI Assisted Productivity</title>
      <link>https://sweb.github.io/posts/study-on-ai-assisted-productivity/</link>
      <pubDate>Mon, 14 Jul 2025 19:41:09 +0200</pubDate>
      <guid>https://sweb.github.io/posts/study-on-ai-assisted-productivity/</guid>
      <description>&lt;p&gt;This is primarily a bookmark about a &lt;a href=&#34;https://metr.org/blog/2025-07-10-early-2025-ai-experienced-os-dev-study/&#34;&gt;study&lt;/a&gt;, conducted at the start of 2025 about productivity impact of using Cursor. Key finding:&lt;/p&gt;
&lt;p&gt;The productivity actually decreases, even though expected and perceived productivity gain of the participants is around 20%&lt;/p&gt;
&lt;p&gt;There are a couple of ideas why this result may not be skewed but first it is important to acknowledge that this is a proper study setup and the results clearly point out that using AI assisted tooling does not increase productivity. Thus, we should be mindful to the fact that productivity gains for developers are not as easy to achieve as oftentimes advertised.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Agents to Write Code for repeatable tasks</title>
      <link>https://sweb.github.io/posts/using-agents-to-write-code/</link>
      <pubDate>Thu, 03 Jul 2025 21:41:22 +0200</pubDate>
      <guid>https://sweb.github.io/posts/using-agents-to-write-code/</guid>
      <description>&lt;p&gt;Today, Armin Ronacher published &lt;a href=&#34;https://lucumr.pocoo.org/2025/7/3/tools/&#34;&gt;yet another post&lt;/a&gt; about agentic coding. This one primarily talks about the shortcomings of MCP with regards to tool selection and robustness. The introductory example is that using the Github CLI will be more token efficient, faster and stable used as a simple tool than the Github MCP server. The extension of this is that letting the LLM use a deterministic program will reliably beat LLM inference, which is not deterministic. This idea is not new, but in context of MCP and agentic systems it gains a new perspective for me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Context Engineering</title>
      <link>https://sweb.github.io/posts/context-engineering/</link>
      <pubDate>Tue, 01 Jul 2025 21:48:57 +0200</pubDate>
      <guid>https://sweb.github.io/posts/context-engineering/</guid>
      <description>&lt;p&gt;In the last days, the term &lt;em&gt;context engineering&lt;/em&gt; as a replacement or maybe redefinition of &lt;em&gt;prompt engineering&lt;/em&gt; has emerged. Philipp Schmid gives an overview about the topic in a recent &lt;a href=&#34;https://www.philschmid.de/context-engineering&#34;&gt;blog post&lt;/a&gt;.
In summary, the idea is that proper LLM usage, especially in context of agentic workflows or systems, is less about this one magic prompt but more about deliberately choosing, what to put into the context of the LLM. This is particularly important when there is a lot of back and forth, e.g. due to chat interactions or a coding agent that works on a more complex tasks, needing to read multiple files with a broad context.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Claude Code Useful Links</title>
      <link>https://sweb.github.io/posts/claude-code-useful-links/</link>
      <pubDate>Thu, 26 Jun 2025 21:12:40 +0200</pubDate>
      <guid>https://sweb.github.io/posts/claude-code-useful-links/</guid>
      <description>&lt;p&gt;In the last weeks I have been using &lt;a href=&#34;https://www.anthropic.com/claude-code&#34;&gt;Claude Code&lt;/a&gt; more and more. Before that, aider was my main driver with occasional use of Github Copilot now and then.&lt;/p&gt;
&lt;p&gt;This is my collection of useful blog posts on how to use Claude Code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://claudelog.com/&#34;&gt;ClaudeLog&lt;/a&gt;: Extensive collection of information about Claude Code, how to set it up and what workflows have worked. Also some motivation why using tools like Claude Code is basically a must have.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lesswrong.com/posts/dxiConBZTd33sFaRC/field-notes-from-shipping-real-code-with-claude&#34;&gt;Field Notes from Shipping Real Code with Claude&lt;/a&gt;: Lot&amp;rsquo;s of helpful notes on how a team is using Claude Code, especially what to include in &lt;code&gt;CLAUDE.md&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lucumr.pocoo.org/2025/6/12/agentic-coding/&#34;&gt;Agentic Coding Recommendations&lt;/a&gt;: Post about techniques to make Claude Code viable and what works, e.g. the choice for using Go as a language and the idea that iteration speed is the most important thing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lucumr.pocoo.org/2025/6/21/my-first-ai-library/&#34;&gt;My First Open Source AI Generated Library&lt;/a&gt;: Short but specific post by Armin Ronacher about building a Python library using Claude Code&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://simonwillison.net/2025/Mar/11/using-llms-for-code/&#34;&gt;Hereâ€™s how I use LLMs to help me write code&lt;/a&gt;: Long post by Simon Willison with general advice on using LLMs for coding that also features a Claude Code example.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://simonwillison.net/2025/Jun/29/agentic-coding/&#34;&gt;Agentic coding&lt;/a&gt;: Summary of a talk on YouTube from Armin Ronacher about how he uses Claude Code&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
